report.start_new_page

from = (@year.to_s + "-" + @month.to_s + "-01").to_date
to =  (from + 1.month) - 1

report.page.values :titulo_ingresos => "RELACION DE INGRESOS #{I18n::translate('date.month_names')[from.month]} #{from.strftime("%Y")}"
report.page.values :titulo_ventas => "RELACION DE VENTAS #{I18n::translate('date.month_names')[from.month]} #{from.strftime("%Y")}"

i=0
wd=0
neto=0
costo=0
financiamiento=0
costo_dev=0
bruto_dev=0
iva_dev=0
iva=0
bruto=0

giros=0
iniciales=0
contados=0
tingreso=0
cliente=0

(from..to).each do |d| 
  wd+=1 if d.workday?
  if d.workday? and d <= Date.today
    i+=1
    report.page.values ("dia" + i.to_s).to_sym => i.to_s
    report.page.values ("fecha" + i.to_s).to_sym => d.strftime('%d/%m')
    ventas = Profit::Factura.ventas_by_day d
    contador_clientes = 0    
    unless ventas.empty?
      report.page.values ("venta" + i.to_s).to_sym => ventas['neto'] unless ventas['neto'].nil?
      neto += ventas['neto'] unless ventas['neto'].nil?

      report.page.values ("devol" + i.to_s).to_sym => ventas['bruto_dev'] unless ventas['bruto_dev'].nil?
      costo_dev += ventas['costo_dev'] unless ventas['costo_dev'].nil?
      bruto_dev += ventas['bruto_dev'] unless ventas['bruto_dev'].nil?
      iva_dev += ventas['iva_dev'] unless ventas['iva_dev'].nil?

      cos = 0
      cos = ventas['costo'] unless ventas['costo'].nil?
      cos -= ventas['costo_dev'] unless ventas['costo_dev'].nil?

      report.page.values ("costo" + i.to_s).to_sym => cos
      costo += cos

      report.page.values ("interes" + i.to_s).to_sym => ventas['financiamiento'] unless ventas['financiamiento'].nil?
      financiamiento += ventas['financiamiento'] unless ventas['financiamiento'].nil?

      report.page.values ("iva" + i.to_s).to_sym => ventas['iva'] unless ventas['iva'].nil?
      iva += ventas['iva'] unless ventas['iva'].nil?

      report.page.values ("vneta" + i.to_s).to_sym => ventas['bruto'] unless ventas['bruto'].nil?
      bruto += ventas['bruto'] unless ventas['bruto'].nil?

      # contador_clientes += ventas['contador'] unless ventas['contador'].nil?
    end

    ingresos = Profit::Factura.ingresos_by_day d
    total_ingresos = 0.0
    unless ingresos.empty?
      report.page.values ("gprofit" + i.to_s).to_sym => ingresos['giros'] unless ingresos['giros'].nil?
      giros += ingresos['giros'] unless ingresos['giros'].nil?
      total_ingresos += ingresos['giros'] unless ingresos['giros'].nil?

      report.page.values ("inicial" + i.to_s).to_sym => ingresos['iniciales'] unless ingresos['iniciales'].nil?
      iniciales += ingresos['iniciales'] unless ingresos['iniciales'].nil?
      total_ingresos += ingresos['iniciales'] unless ingresos['iniciales'].nil?

      report.page.values ("contado" + i.to_s).to_sym => ingresos['contados'] unless ingresos['contados'].nil?
      contados += ingresos['contados'] unless ingresos['contados'].nil?
      total_ingresos += ingresos['contados'] unless ingresos['contados'].nil?

      contador_clientes += ingresos['contador'] unless ingresos['contador'].nil?

      report.page.values ("tingreso" + i.to_s).to_sym => total_ingresos
      tingreso += total_ingresos
    end
    report.page.values ("cliente" + i.to_s).to_sym => contador_clientes
    cliente += contador_clientes
  elsif d.workday?
    report.page.values ("dia" + wd.to_s).to_sym => wd.to_s
  end

  # Totales Ingresos
  report.page.values :tventa => neto
  report.page.values :tcosto => costo
  report.page.values :tinteres => financiamiento
  report.page.values :tdevol => bruto_dev
  report.page.values :tiva => iva
  report.page.values :tvneta => bruto

  report.page.values :mdviva => iva - iva_dev
  report.page.values :mdvneta => bruto - bruto_dev

  # Totales Ventas
  report.page.values :tgprofit => giros
  report.page.values :tinicial => iniciales
  report.page.values :tcontado => contados
  report.page.values :ttingreso => tingreso
  report.page.values :tcliente => cliente

  # Resumen de Devoluciones
  report.page.values :devolucm => bruto_dev
  devol_meses_anteriores = Profit::Factura.devoluciones  (Time.now.year.to_s + "-01-01").to_date, from - 1.day 
  report.page.values :devolucea => devol_meses_anteriores['bruto'] unless devol_meses_anteriores['bruto'].nil?
  devol_ano_anterior = Profit::Factura.devoluciones  ((Time.now.year - 1).to_s + "-01-01").to_date, ((Time.now.year - 1).to_s + "-12-31").to_date
  report.page.values :devoluca => devol_meses_anteriores['bruto'] unless devol_meses_anteriores['bruto'].nil?
  report.page.values :ano_anterior_devol => (Time.now.year - 1).to_s


  #puts d.to_s + ": " + d.workday?.to_s
end

vendedores = Profit::Factura.ventas_vendedores_by_days from, to
venta_neta = 0
vendedores.each_with_index do |v,i|
  if i < 6
    report.page.values ("vendedor" + (i+1).to_s).to_sym => v['ven_des'] unless v['ven_des'].nil?
    report.page.values ("vn" + (i+1).to_s).to_sym => v['neto'] unless v['neto'].nil?

    if i<3
      report.page.values ("metav" + (i+1).to_s).to_sym => (@meta_ventas.to_f * 0.3).round(2)
    else
      report.page.values ("metav" + (i+1).to_s).to_sym => (@meta_ventas.to_f * 0.05).round(2)
    end
  end
  venta_neta += v['neto'] unless v['neto'].nil?
end
report.page.values :totalvn => venta_neta

# Por vencer
total_cartera_por_vencer=0
cartera_0_30_por_vencer = Profit::Factura.cartera_vencida Date.today, (Date.today + 30.days)
cartera_30_60_por_vencer = Profit::Factura.cartera_vencida Date.today + 30.days + 1.day, (Date.today + 60.days)
cartera_60_90_por_vencer = Profit::Factura.cartera_vencida Date.today + 60.days + 1.day, (Date.today + 90.days)
cartera_90_120_por_vencer = Profit::Factura.cartera_vencida Date.today + 90.days + 1.day, (Date.today + 120.days)
cartera_120_150_por_vencer = Profit::Factura.cartera_vencida Date.today + 120.days + 1.day, (Date.today + 150.days)
cartera_mayor_150_por_vencer = Profit::Factura.cartera_vencida Date.today + 150.days + 1.day, (Date.today + 3650.days)


report.page.values :pvencer1 => cartera_0_30_por_vencer['neto'] unless cartera_0_30_por_vencer['neto'].nil?
report.page.values :pvencer2 => cartera_30_60_por_vencer['neto'] unless cartera_30_60_por_vencer['neto'].nil?
report.page.values :pvencer3 => cartera_60_90_por_vencer['neto'] unless cartera_60_90_por_vencer['neto'].nil?
report.page.values :pvencer4 => cartera_90_120_por_vencer['neto'] unless cartera_90_120_por_vencer['neto'].nil?
report.page.values :pvencer5 => cartera_120_150_por_vencer['neto'] unless cartera_120_150_por_vencer['neto'].nil?
report.page.values :pvencer6 => cartera_mayor_150_por_vencer['neto'] unless cartera_mayor_150_por_vencer['neto'].nil?

total_cartera_por_vencer += cartera_0_30_por_vencer['neto'] unless cartera_0_30_por_vencer['neto'].nil?
total_cartera_por_vencer += cartera_30_60_por_vencer['neto'] unless cartera_30_60_por_vencer['neto'].nil?
total_cartera_por_vencer += cartera_60_90_por_vencer['neto'] unless cartera_60_90_por_vencer['neto'].nil?
total_cartera_por_vencer += cartera_90_120_por_vencer['neto'] unless cartera_90_120_por_vencer['neto'].nil?
total_cartera_por_vencer += cartera_120_150_por_vencer['neto'] unless cartera_120_150_por_vencer['neto'].nil?
total_cartera_por_vencer += cartera_mayor_150_por_vencer['neto'] unless cartera_mayor_150_por_vencer['neto'].nil?

report.page.values :tpvencer => total_cartera_por_vencer


# Vencida
total_cartera_vencida=0
cartera_0_30_vencida = Profit::Factura.cartera_vencida (Date.today - 30.days), Date.today
cartera_30_60_vencida = Profit::Factura.cartera_vencida (Date.today - 60.days), Date.today - 30.days - 1.day
cartera_60_90_vencida = Profit::Factura.cartera_vencida (Date.today - 90.days), Date.today - 60.days - 1.day
cartera_90_120_vencida = Profit::Factura.cartera_vencida (Date.today - 120.days), Date.today - 90.days - 1.day
cartera_120_150_vencida = Profit::Factura.cartera_vencida (Date.today - 150.days), Date.today - 120.days - 1.day
cartera_mayor_150_vencida = Profit::Factura.cartera_vencida (Date.today - 3650.days), Date.today - 150.days - 1.day


report.page.values :vencida1 => cartera_0_30_vencida['neto'] unless cartera_0_30_vencida['neto'].nil?
report.page.values :vencida2 => cartera_30_60_vencida['neto'] unless cartera_30_60_vencida['neto'].nil?
report.page.values :vencida3 => cartera_60_90_vencida['neto'] unless cartera_60_90_vencida['neto'].nil?
report.page.values :vencida4 => cartera_90_120_vencida['neto'] unless cartera_90_120_vencida['neto'].nil?
report.page.values :vencida5 => cartera_120_150_vencida['neto'] unless cartera_120_150_vencida['neto'].nil?
report.page.values :vencida6 => cartera_mayor_150_vencida['neto'] unless cartera_mayor_150_vencida['neto'].nil?

total_cartera_vencida += cartera_0_30_vencida['neto'] unless cartera_0_30_vencida['neto'].nil?
total_cartera_vencida += cartera_30_60_vencida['neto'] unless cartera_30_60_vencida['neto'].nil?
total_cartera_vencida += cartera_60_90_vencida['neto'] unless cartera_60_90_vencida['neto'].nil?
total_cartera_vencida += cartera_90_120_vencida['neto'] unless cartera_90_120_vencida['neto'].nil?
total_cartera_vencida += cartera_120_150_vencida['neto'] unless cartera_120_150_vencida['neto'].nil?
total_cartera_vencida += cartera_mayor_150_vencida['neto'] unless cartera_mayor_150_vencida['neto'].nil?

report.page.values :tvencida => total_cartera_vencida

report.page.values :tcartera=> total_cartera_vencida + total_cartera_por_vencer

# Lineas
lineas = Profit::Factura.lineas from, to
lineas.each_with_index do |l,i|
  report.page.values ("linea" + (i+1).to_s).to_sym => l['lin_des'].strip unless l['lin_des'].nil?
  report.page.values ("cant" + (i+1).to_s).to_sym => l['contador'].to_i unless l['contador'].nil?
end

# Estadisticas Cobranza

#Promedio de Ingreso hasta el momento
pdingreso = 0
pdingreso = (tingreso / i).round(2) if tingreso > 0
report.page.values :pdingreso => pdingreso

#Ingreso estimado en base al promedio diario
eimes = 0
eimes = (pdingreso * wd).round(2) if pdingreso > 0
report.page.values :eimes => eimes

#Promedio de Giros hasta el momento
pprofit = 0
pprofit = (giros / i).round(2) if giros > 0
report.page.values :pprofit => pprofit

#Meta del mes de cobranza de giros
mprofit = @meta_cobranza.to_f
report.page.values :mprofit => mprofit if mprofit > 0

#Ingreso estimado de giros en base al promedio diario
pcubrir = 0
pcubrir = (mprofit / wd).round(2) if mprofit > 0
report.page.values :pcubrir => pcubrir

#Diferencia entre promedio diario y promedio a cubrir
ddiaria = 0
ddiaria = (pprofit - pcubrir).abs.round(2) if (pprofit+pcubrir).abs > 0
report.page.values :ddiaria => ddiaria

#Acumulado del diferencial entre promedio diario y promedio a cubrir
dacumu = 0
dacumu = (ddiaria * i).round(2) if ddiaria > 0
report.page.values :dacumu => dacumu

#Total cobrado
tcobrado = 0
tcobrado = giros if giros > 0
report.page.values :tcobrado => tcobrado

#Porcentaje cobrado
pcobrado = 0
pcobrado = (giros * 100) / mprofit if giros > 0 and pprofit > 0
report.page.values :pcobrado => pcobrado.round(2).to_s + "%"


# Estadisticas Ventas

#Meta de venta del mes
mensual3 = @meta_ventas.to_f
report.page.values :mensual3 => mensual3 if mensual3 > 0

#Promedio diario de la meta del mes de venta 
diario3 = 0
diario3 = (mensual3 / wd) if mensual3 > 0
report.page.values :diario3 => diario3 if diario3 > 0

#Total Meta Venta
totalmv = @meta_ventas.to_f
report.page.values :totalmv => totalmv if totalmv > 0

#Promedio diario de la venta del mes
diario2 = 0
diario2 = (venta_neta / i) if venta_neta > 0
report.page.values :diario2 => diario2 if diario2 > 0

#venta del mes
mensual2 = (diario2 * wd).round(2)
report.page.values :mensual2 => mensual2 if mensual2 > 0

#Diferencia de la meta de venta y lo vendido
diferenpm = 0
diferenpm = (mensual2 - mensual3).abs if mensual2 > 0 and mensual3 > 0
report.page.values :diferenpm => diferenpm if diferenpm > 0

# Titulos acumulados

report.page.values :titulo_acumulado_cobranza => "ACUMULADO COMPARATIVO COBRANZA 
#{from.strftime("%Y")}"
report.page.values :titulo_acumulado_anteriores_cobranza => "ACUMULADOS 
#{(from-2.year).strftime("%Y")} #{(from-1.year).strftime("%Y")}"
report.page.values :cano1 => (from-2.year).strftime("%Y")
report.page.values :cano2 => (from-1.year).strftime("%Y")


report.page.values :titulo_acumulado_ventas => "ACUMULADO COMPARATIVO VENTAS
#{from.strftime("%Y")}"
report.page.values :titulo_acumulado_anteriores_ventas => "ACUMULADOS 
#{(from-3.year).strftime("%Y")} #{(from-2.year).strftime("%Y")} #{(from-1.year).strftime("%Y")}"
report.page.values :vano1 => (from-3.year).strftime("%Y")
report.page.values :vano2 => (from-2.year).strftime("%Y")
report.page.values :vano3 => (from-1.year).strftime("%Y")

meses = 0

acum_meta_cobranza = 0
acum_logrado_cobranza = 0
acum_total_cobranza = 0
acum_diferencia_cobranza = 0
acum_2011_cobranza = 0
acum_2012_cobranza = 0
acum_porcen_cobranza = 0

acum_meta_ventas = 0
acum_logrado_ventas = 0
acum_total_ventas = 0
acum_diferencia_ventas = 0
acum_2011_ventas = 0
acum_2012_ventas = 0
acum_2013_ventas = 0
acum_porcen_ventas = 0


# Acumulados Comparativos Cobranza
(1..12).each do |mes|

  if mes <= Date.today.month
    meses += 1
    meta = Goal.find_by_month_and_year(mes, Date.today.year)
    if meta
      meta_v = meta.sales
      meta_c = meta.billing
    else
      meta_v = 0
      meta_c = 0
    end

    mes_inicio = (Time.now.year.to_s + "-" + mes.to_s + "-01").to_date
    mes_fin =  (mes_inicio + 1.month) - 1

    cobranza = Profit::Factura.ingresos_by_day(mes_inicio, mes_fin)
    cobranza_ano1 = Profit::Factura.ingresos_by_day(mes_inicio - 2.year, mes_fin - 2.year)
    cobranza_ano2 = Profit::Factura.ingresos_by_day(mes_inicio - 1.year, mes_fin - 1.year)

    ventas = Profit::Factura.ventas_by_day(mes_inicio, mes_fin)
    ventas_ano1 = Profit::Factura.ventas_by_day(mes_inicio - 3.year, mes_fin - 3.year)
    ventas_ano2 = Profit::Factura.ventas_by_day(mes_inicio - 2.year, mes_fin - 2.year)
    ventas_ano3 = Profit::Factura.ventas_by_day(mes_inicio - 1.year, mes_fin - 1.year)


    report.page.values ("mes" + (mes).to_s).to_sym => I18n::translate('date.month_names')[mes]
    report.page.values ("ames" + (mes).to_s).to_sym => I18n::translate('date.month_names')[mes]

    report.page.values ("meta" + (mes).to_s).to_sym => meta_c
    acum_meta_cobranza += meta_c
    report.page.values ("ameta" + (mes).to_s).to_sym => meta_v
    acum_meta_ventas += meta_v

    report.page.values ("logrado" + (mes).to_s).to_sym => cobranza['giros'] unless cobranza['giros'].nil?
    acum_logrado_cobranza += cobranza['giros'] unless cobranza['giros'].nil?
    report.page.values ("2011" + (mes).to_s).to_sym => cobranza_ano1['giros'] unless cobranza_ano1['giros'].nil?
    acum_2011_cobranza += cobranza_ano1['giros'] unless cobranza_ano1['giros'].nil?
    report.page.values ("2012" + (mes).to_s).to_sym => cobranza_ano2['giros'] unless cobranza_ano2['giros'].nil?
    acum_2012_cobranza += cobranza_ano2['giros'] unless cobranza_ano2['giros'].nil?

    tmp_neto = 0
    tmp_neto = ventas['neto'] unless ventas['neto'].nil?
    tmp_neto -= ventas['iva'] unless ventas['iva'].nil?
    tmp_neto -= ventas['costo_dev'] unless ventas['costo_dev'].nil?
    tmp_neto -= ventas['iva_dev'] unless ventas['iva_dev'].nil?

    report.page.values ("alogrado" + (mes).to_s).to_sym => (tmp_neto) unless ventas['neto'].nil?
    acum_logrado_ventas += ventas['neto'] unless ventas['neto'].nil?
    report.page.values ("2010" + (mes).to_s).to_sym => ventas_ano1['neto'] unless ventas_ano1['neto'].nil?
    acum_2011_ventas += ventas_ano1['neto'] unless ventas_ano1['neto'].nil?
    report.page.values ("a2011" + (mes).to_s).to_sym => ventas_ano2['neto'] unless ventas_ano2['neto'].nil?
    acum_2012_ventas += ventas_ano2['neto'] unless ventas_ano2['neto'].nil?
    report.page.values ("a2012" + (mes).to_s).to_sym => ventas_ano3['neto'] unless ventas_ano3['neto'].nil?
    acum_2013_ventas += ventas_ano3['neto'] unless ventas_ano3['neto'].nil?

    dif = 0
    dif = (cobranza['giros'] - meta_c).round(2) unless cobranza['giros'].nil?
    report.page.values ("diferen" + (mes).to_s).to_sym => dif
    acum_diferencia_cobranza += dif

    dif = 0
    dif = (ventas['neto'] - meta_v).round(2) unless ventas['neto'].nil?
    report.page.values ("adiferen" + (mes).to_s).to_sym => dif
    acum_diferencia_ventas += dif

    report.page.values ("porcen" + (mes).to_s).to_sym => ((cobranza['giros'] * 100) / meta_c).round(2).to_s + "%" unless cobranza['giros'].nil?
    acum_porcen_cobranza += ((cobranza['giros'] * 100) / meta_c).round(2) unless cobranza['giros'].nil?
    report.page.values ("aporcen" + (mes).to_s).to_sym => ((ventas['neto'] * 100) / meta_v).round(2).to_s + "%" unless ventas['neto'].nil?
    acum_porcen_ventas += ((ventas['neto'] * 100) / meta_v).round(2) unless ventas['neto'].nil?
    

    ing = 0
    ing += cobranza['giros'] unless cobranza['giros'].nil?
    ing += cobranza['iniciales'] unless cobranza['iniciales'].nil?
    ing += cobranza['contados'] unless cobranza['contados'].nil?
    report.page.values ("ingresos" + (mes).to_s).to_sym => ing
    acum_total_cobranza += ing
    
  end
end

# Acumulado de meta de cobranza y ventas
report.page.values :ameta => acum_meta_cobranza
report.page.values :aameta => acum_meta_ventas

# Promedio de meta de cobranza y ventas
report.page.values :pmeta => (acum_meta_cobranza / meses).round(2)
report.page.values :ppmeta => (acum_meta_ventas / meses).round(2)

# Acumulado de lo logrado de cobranza y ventas
report.page.values :alogrado => acum_logrado_cobranza
report.page.values :aalogrado => acum_logrado_ventas

# Promedio de lo logrado de cobranza y ventas
report.page.values :plogrado => (acum_logrado_cobranza / meses).round(2)
report.page.values :pplogrado => (acum_logrado_ventas / meses).round(2)


# Acumulado de diferencias meta/logrado
report.page.values :adiferen => acum_diferencia_cobranza
report.page.values :aadiferen => acum_diferencia_ventas

# Promedio de diferencias meta/logrado
report.page.values :pdiferen => (acum_diferencia_cobranza / meses).round(2)
report.page.values :ppdiferen => (acum_diferencia_ventas / meses).round(2)


# Acumulado de totales de cobranza
report.page.values :aingresos => acum_total_cobranza

# Promedio de totales de cobranza
report.page.values :pingresos => (acum_total_cobranza / meses).round(2)

# Acumulado años anteriores
report.page.values :a2011 => acum_2011_cobranza
report.page.values :a2012 => acum_2012_cobranza

# Promedio años anteriores
report.page.values :p2011 => (acum_2011_cobranza / meses).round(2)
report.page.values :p2012 => (acum_2012_cobranza / meses).round(2)

# Acumulado y Promedio Cobranza
report.page.values :porc_a => (acum_porcen_cobranza).round(2).to_s + "%"
report.page.values :porc_p => (acum_porcen_cobranza / meses).round(2).to_s + "%"

# Acumulado y Promedio Ventas
report.page.values :v_porc_a => (acum_porcen_ventas).round(2).to_s + "%"
report.page.values :v_porc_p => (acum_porcen_ventas / meses).round(2).to_s + "%"

# Acumulado de años anteriores
report.page.values :aa2010 => acum_2011_ventas
report.page.values :aa2011 => acum_2012_ventas
report.page.values :aa2012 => acum_2013_ventas

# Promedio de años anteriores
report.page.values :pp2010 => (acum_2011_ventas / meses).round(2)
report.page.values :pp2011 => (acum_2012_ventas / meses).round(2)
report.page.values :pp2012 => (acum_2013_ventas / meses).round(2)

# Costo del inventario actual
inventario = Profit::Factura.inventario_vigente
report.page.values :inventario => inventario['inventario'] unless inventario['inventario'].nil?
